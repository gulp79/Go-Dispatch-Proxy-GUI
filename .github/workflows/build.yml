name: Build Python Application

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
    
    - name: Build with PyInstaller
      run: |
        pyinstaller go-dispatch-proxy-gui.spec
    
    # Non usiamo upload-artifact per evitare problemi di compatibilit√†
    # Al suo posto, archiviamo gli eseguibili e li salviamo come artefatti di GitHub Actions
    - name: Archive Windows build
      if: matrix.os == 'windows-latest'
      run: |
        powershell Compress-Archive -Path dist/* -DestinationPath go-dispatch-proxy-gui-windows.zip
        
    - name: Archive Linux build
      if: matrix.os == 'ubuntu-latest'
      run: |
        tar -C dist -czvf go-dispatch-proxy-gui-linux.tar.gz .
        
    - name: Archive macOS build
      if: matrix.os == 'macos-latest'
      run: |
        ditto -c -k --keepParent dist go-dispatch-proxy-gui-macos.zip
        
    # Salviamo gli archivi come artefatti
    - name: Upload build archives
      uses: actions/upload-artifact@v2
      with:
        name: build-${{ matrix.os }}
        path: |
          *.zip
          *.tar.gz
